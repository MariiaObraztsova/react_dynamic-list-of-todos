{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","titleToSearch","completeStatus","todos","selectUser","handleInputChange","className","htmlFor","type","id","name","value","onChange","placeholder","length","map","todo","title","completed","userId","classNames","checked","readOnly","onClick","request","url","a","fetch","response","ok","Error","status","statusText","json","CurrentUser","state","user","errorMessage","this","loadUserInfo","prevProps","props","setState","username","email","phone","clearSelection","React","Component","App","selectedUserId","clearSelectedUser","event","prevState","target","toLowerCase","preparedTodos","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0f7f6cc.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\n\nimport classNames from 'classnames';\n\ninterface Props {\n  titleToSearch: string,\n  completeStatus: string,\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  handleInputChange: (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const TodoList: React.FC<Props> = ({\n  titleToSearch,\n  completeStatus,\n  todos,\n  selectUser,\n  handleInputChange,\n}) => (\n  <div className=\"TodoList\">\n    <div className=\"TodosSearch\">\n      <label\n        htmlFor=\"title\"\n        className=\"TodosSearch__label\"\n      >\n        Title:\n        <input\n          type=\"text\"\n          id=\"title\"\n          name=\"titleToSearch\"\n          value={titleToSearch}\n          onChange={handleInputChange}\n          placeholder=\"Task title\"\n        />\n      </label>\n\n      <label\n        htmlFor=\"title\"\n        className=\"TodosSearch__label\"\n      >\n        Status:\n        <select\n          name=\"completeStatus\"\n          id=\"userId\"\n          value={completeStatus}\n          onChange={handleInputChange}\n        >\n          <option value=\"\">\n            Choose status\n          </option>\n\n          <option value=\"not completed\">\n            Not completed\n          </option>\n\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n      </label>\n    </div>\n\n    <h2>Todos:</h2>\n\n    {todos.length > 0 && (\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => {\n            const {\n              title, completed, id, userId,\n            } = todo;\n\n            return (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': completed },\n                  { 'TodoList__item--unchecked': !completed },\n                )}\n                key={id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(userId)}\n                >\n                  {`User ${userId}`}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    )}\n  </div>\n);\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  try {\n    const response = await fetch(`${API_URL}${url}`);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`The problem is here ${error}`);\n  }\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUserByID = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport { getUserByID } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  clearSelection: () => void,\n}\n\ninterface State {\n  user: User | null,\n  errorMessage: boolean\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {} as User,\n    errorMessage: false,\n  };\n\n  componentDidMount() {\n    this.loadUserInfo();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserInfo();\n    }\n  }\n\n  async loadUserInfo() {\n    try {\n      const user: User = await getUserByID(this.props.userId);\n\n      this.setState({\n        user,\n        errorMessage: false,\n      });\n    } catch (error) {\n      this.setState({\n        user: null,\n        errorMessage: true,\n      });\n    }\n  }\n\n  render() {\n    const { user, errorMessage } = this.state;\n\n    return (\n      <div>\n        {errorMessage && (\n          <h2>There is no such user</h2>\n        )}\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span className=\"CurrentUser__title--span\">\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{`${user.name} ${user.username}`}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={this.props.clearSelection}\n            >\n              Clear user\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number | null;\n  todos: Todo[],\n  titleToSearch: string,\n  completeStatus: string\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    titleToSearch: '',\n    completeStatus: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState(\n      { todos },\n    );\n  }\n\n  selectUser = (userId: number) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: null,\n    });\n  };\n\n  handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [event.target.name]: event.target.value.toLowerCase(),\n    }));\n  };\n\n  preparedTodos = () => {\n    const { todos, titleToSearch, completeStatus } = this.state;\n\n    return todos.filter(todo => {\n      if (titleToSearch) {\n        return todo.title.toLowerCase().includes(titleToSearch);\n      }\n\n      return todo;\n    }).filter(todo => {\n      if (completeStatus === 'completed') {\n        return todo.completed;\n      }\n\n      if (completeStatus === 'not completed') {\n        return todo.completed === false;\n      }\n\n      return todo;\n    });\n  };\n\n  render() {\n    const { selectedUserId, titleToSearch, completeStatus } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            titleToSearch={titleToSearch}\n            completeStatus={completeStatus}\n            todos={this.preparedTodos()}\n            selectUser={this.selectUser}\n            handleInputChange={this.handleInputChange}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelection={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}