{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleToSearch","completeStatus","handleInputChange","event","setState","prevState","target","name","value","toLowerCase","preparedTodos","props","todos","filter","todo","title","includes","completed","this","className","htmlFor","type","id","onChange","placeholder","length","map","userId","classNames","checked","readOnly","onClick","selectUser","React","Component","request","url","a","fetch","response","ok","Error","status","statusText","json","CurrentUser","user","errorMessage","loadUserInfo","prevProps","username","email","phone","clearSelection","App","selectedUserId","clearSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e0bdedc.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\n\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n}\n\ninterface State {\n  titleToSearch: string,\n  completeStatus: string\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    titleToSearch: '',\n    completeStatus: '',\n  };\n\n  handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [event.target.name]: event.target.value.toLowerCase(),\n    }));\n  };\n\n  preparedTodos = () => {\n    const { titleToSearch, completeStatus } = this.state;\n\n    return this.props.todos.filter(todo => {\n      if (titleToSearch) {\n        return todo.title.toLowerCase().includes(titleToSearch);\n      }\n\n      return todo;\n    }).filter(todo => {\n      if (completeStatus === 'completed') {\n        return todo.completed;\n      }\n\n      if (completeStatus === 'not completed') {\n        return todo.completed === false;\n      }\n\n      return todo;\n    });\n  };\n\n  render() {\n    const { titleToSearch, completeStatus } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <div className=\"TodosSearch\">\n          <label\n            htmlFor=\"title\"\n            className=\"TodosSearch__label\"\n          >\n            Title:\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"titleToSearch\"\n              value={titleToSearch}\n              onChange={this.handleInputChange}\n              placeholder=\"Task title\"\n            />\n          </label>\n\n          <label\n            htmlFor=\"title\"\n            className=\"TodosSearch__label\"\n          >\n            Status:\n            <select\n              name=\"completeStatus\"\n              id=\"userId\"\n              value={completeStatus}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"\">\n                Choose status\n              </option>\n\n              <option value=\"not completed\">\n                Not completed\n              </option>\n\n              <option value=\"completed\">\n                Completed\n              </option>\n            </select>\n          </label>\n        </div>\n\n        <h2>Todos:</h2>\n\n        {this.props.todos.length > 0 && (\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\">\n              {this.preparedTodos().map(todo => {\n                const {\n                  title, completed, id, userId,\n                } = todo;\n\n                return (\n                  <li\n                    className={classNames(\n                      'TodoList__item',\n                      { 'TodoList__item--checked': completed },\n                      { 'TodoList__item--unchecked': !completed },\n                    )}\n                    key={id}\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={completed}\n                        readOnly\n                      />\n                      <p>{title}</p>\n                    </label>\n\n                    <button\n                      className=\"\n                        TodoList__user-button\n                        TodoList__user-button--selected\n                        button\n                      \"\n                      type=\"button\"\n                      onClick={() => this.props.selectUser(userId)}\n                    >\n                      {`User ${userId}`}\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  try {\n    const response = await fetch(`${API_URL}${url}`);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`The problem is here ${error}`);\n  }\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUserByID = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport { getUserByID } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  clearSelection: () => void,\n}\n\ninterface State {\n  user: User | null,\n  errorMessage: boolean\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    errorMessage: false,\n  };\n\n  componentDidMount() {\n    this.loadUserInfo();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserInfo();\n    }\n  }\n\n  async loadUserInfo() {\n    try {\n      const user: User = await getUserByID(this.props.userId);\n\n      this.setState({\n        user,\n        errorMessage: false,\n      });\n    } catch (error) {\n      this.setState({\n        user: null,\n        errorMessage: true,\n      });\n    }\n  }\n\n  render() {\n    const { user, errorMessage } = this.state;\n\n    return (\n      <div>\n        {errorMessage && (\n          <h2>There is no such user</h2>\n        )}\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span className=\"CurrentUser__title--span\">\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{`${user.name} ${user.username}`}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={this.props.clearSelection}\n            >\n              Clear user\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number | null;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState(\n      { todos },\n    );\n  }\n\n  selectUser = (userId: number) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: null,\n    });\n  };\n\n  handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [event.target.name]: event.target.value.toLowerCase(),\n    }));\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelection={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}